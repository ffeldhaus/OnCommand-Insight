# including external Credential Manager cmdlets
. $PSScriptRoot\CredentialManager.ps1

# Workaround to allow Powershell to accept untrusted certificates
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
       public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@

# OCI 7.2 only supports TLS 1.2 and PowerShell does not auto negotiate it, thus enforcing TLS 1.2 which works for older OCI Versions as well
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
 
# Using .NET JSON Serializer as JSON serialization included in Invoke-RestMethod has a length restriction for JSON content
Add-Type -AssemblyName System.Web.Extensions
$global:javaScriptSerializer = New-Object System.Web.Script.Serialization.JavaScriptSerializer
$global:javaScriptSerializer.MaxJsonLength = [System.Int32]::MaxValue
$global:javaScriptSerializer.RecursionLimit = 99

<#
.SYNOPSIS
Add OCI Credential to the Windows Credential Store
.DESCRIPTION
Add OCI Credential to the Windows Credential Store
.EXAMPLE
Add-OciCredential
.PARAMETER Name
The name of the OCI Server.
.PARAMETER Credential
A System.Management.Automation.PSCredential object containing the credentials needed to log into the OCI server.
#>
function Add-OciCredential {
    [CmdletBinding()]
 
    PARAM (
        [parameter( Mandatory=$True,
                    Position=0,
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True,
                    HelpMessage="The name of the OCI Server.")][String[]]$Name,
        [parameter( Mandatory=$True,
                    Position=1,
                    HelpMessage="A System.Management.Automation.PSCredential object containing the credentials needed to log into the OCI server.")][System.Management.Automation.PSCredential]$Credential
    )

    Process {
        foreach ($Target in $Name) {
            $null = Add-WindowsCredential -Target $Target -UserName $Credential.UserName -Password ($Credential.Password | ConvertFrom-SecureString) -Comment 'OnCommand-Insight'
        }
    }
}

<#
.SYNOPSIS
Get OCI Credential from the Windows Credential Store
.DESCRIPTION
Get OCI Credential from the Windows Credential Store
.EXAMPLE
Get-OciCredential
.PARAMETER Name
The name of the OCI Server.
#>
function Get-OciCredential {
    [CmdletBinding()]
 
    PARAM (
        [parameter( Mandatory=$True,
                    Position=0,
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True,
                    HelpMessage="The name of the OCI Server.")][String[]]$Name
    )

    Begin {
        $Result = $null
    }

    Process {
        $Name = @($Name)
        foreach ($Target in $Name) {
            $WindowsCredential = Get-WindowsCredential -Target $Target
            if ($WindowsCredential) {
                $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList @($WindowsCredential.UserName,($WindowsCredential.CredentialBlob | ConvertTo-SecureString))
                $Result = [PSCustomObject]@{Name=$Target;Credential=$Credential}
                Write-Output $Result
            }
            else {
                Write-Warning "No Credential found for $Target"
            }
        }
    }
}

function Get-OciCredentials {
    [CmdletBinding()]

    PARAM ()
 
    $WindowsCredentials = Get-WindowsCredentials | ? { $_.Comment -eq 'OnCommand-Insight' }

    foreach ($WindowsCredential in $WindowsCredentials) {
        if ($WindowsCredential) {
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList @($WindowsCredential.UserName,($WindowsCredential.CredentialBlob | ConvertTo-SecureString))
            $Name = ($WindowsCredential.TargetName -replace '.*target=','')
            $Result = [PSCustomObject]@{Name=$Name;Credential=$Credential}
            Write-Output $Result
        }
    }
}

function Remove-OciCredential {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                   Position=0,
                   HelpMessage="The name of the OCI Server. This value may also be a string representation of an IP address. If not an address, the name must be resolvable to an address.")][String]$Name
    )

    $null = Remove-WindowsCredential -Target $Name
}

# Function for multipart upload (based on http://blog.majcica.com/2016/01/13/powershell-tips-and-tricks-multipartform-data-requests/)
function global:Invoke-MultipartFormDataUpload
{
    [CmdletBinding()]
    PARAM
    (
        [string][parameter(Mandatory = $true)][ValidateNotNullOrEmpty()]$InFile,
        [string]$ContentType,
        [Uri][parameter(Mandatory = $true)][ValidateNotNullOrEmpty()]$Uri,
        [PSObject]$Header
    )
    BEGIN
    {
        if (-not (Test-Path $InFile))
        {
            $errorMessage = ("File {0} missing or unable to read." -f $InFile)
            $exception =  New-Object System.Exception $errorMessage
			$errorRecord = New-Object System.Management.Automation.ErrorRecord $exception, 'MultipartFormDataUpload', ([System.Management.Automation.ErrorCategory]::InvalidArgument), $InFile
			$PSCmdlet.ThrowTerminatingError($errorRecord)
        }

        if (-not $ContentType)
        {
            Add-Type -AssemblyName System.Web

            $mimeType = [System.Web.MimeMapping]::GetMimeMapping($InFile)
            
            if ($mimeType)
            {
                $ContentType = $mimeType
            }
            else
            {
                $ContentType = "application/octet-stream"
            }
        }
    }
    PROCESS
    {
        Add-Type -AssemblyName System.Net.Http

		$httpClientHandler = New-Object System.Net.Http.HttpClientHandler

        $httpClient = New-Object System.Net.Http.Httpclient $httpClientHandler

        if ($Header.Authorization) {
            $httpClient.DefaultRequestHeaders.Authorization = $Header.Authorization
        }

        # set HTTP Client Timeout to a large value - e.g. 24 hours (in microsecends) to prevent timeout during upload and following processing of data (e.g. restore)
        $httpClient.Timeout = 864000000000

        $packageFileStream = New-Object System.IO.FileStream @($InFile, [System.IO.FileMode]::Open)
        
		$contentDispositionHeaderValue = New-Object System.Net.Http.Headers.ContentDispositionHeaderValue "form-data"
	    $contentDispositionHeaderValue.Name = "backupFile"
		$contentDispositionHeaderValue.FileName = (Split-Path $InFile -leaf)

        $contentDispositionHeaderValue

        $streamContent = New-Object System.Net.Http.StreamContent $packageFileStream
        $streamContent.Headers.ContentDisposition = $contentDispositionHeaderValue
        $streamContent.Headers.ContentType = New-Object System.Net.Http.Headers.MediaTypeHeaderValue $ContentType
        
        $content = New-Object System.Net.Http.MultipartFormDataContent
        $content.Add($streamContent)

        try
        {
            Write-Host "Starting upload"
			$response = $httpClient.PostAsync($Uri, $content).Result

			if (!$response.IsSuccessStatusCode)
			{
				$responseBody = $response.Content.ReadAsStringAsync().Result
				$errorMessage = "Status code {0}. Reason {1}. Server reported the following message: {2}." -f $response.StatusCode, $response.ReasonPhrase, $responseBody

				throw [System.Net.Http.HttpRequestException] $errorMessage
			}

			return $response.Content.ReadAsStringAsync().Result
        }
        catch [Exception]
        {
			$PSCmdlet.ThrowTerminatingError($_)
        }
        finally
        {
            if($null -ne $httpClient)
            {
                $httpClient.Dispose()
            }

            if($null -ne $response)
            {
                $response.Dispose()
            }
        }
    }
    END { }
}
 
# Functions necessary to parse JSON output from .NET serializer to PowerShell Objects
function ParseItem($jsonItem) {
    if($jsonItem.PSObject.TypeNames -match "Array") {
        return ParseJsonArray($jsonItem)
    }
    elseif($jsonItem.PSObject.TypeNames -match "Dictionary") {
        return ParseJsonObject([HashTable]$jsonItem)
    }
    else {
        return $jsonItem
    }
}
 
function ParseJsonObject($jsonObj) {
    $result = New-Object -TypeName PSCustomObject
    foreach ($key in $jsonObj.Keys) {
        $item = $jsonObj[$key]
        if ($item) {
            $parsedItem = ParseItem $item
        } else {
            $parsedItem = $null
        }
        $result | Add-Member -MemberType NoteProperty -Name $key -Value $parsedItem
    }
    return $result
}
 
function ParseJsonArray($jsonArray) {
    $result = @()
    $jsonArray | ForEach-Object {
        $result += ,(ParseItem $_)
    }
    return $result
}
 
function ParseJsonString($json) {
    $config = $javaScriptSerializer.DeserializeObject($json)
    if ($config -is [Array]) {
        return ParseJsonArray($config)       
    }
    else {
        return ParseJsonObject($config)
    }
}

# helper function to convert datetime to unix timestamp
function ConvertTo-UnixTimestamp {
       $epoch = Get-Date -Year 1970 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0  
      $input | % { 
        if ($_ -is [datetime]) {
                  $milliSeconds = [math]::truncate($_.ToUniversalTime().Subtract($epoch).TotalMilliSeconds)
        }
        else {
            $milliSeconds = $_
        }
              Write-Output $milliSeconds
       }     
}
 
# helper function to convert unix timestamp to datetime
function ConvertFrom-UnixDate {
    $input | % {
        $date = $CurrentOciServer.Timezone.ToLocalTime(([datetime]'1/1/1970').AddMilliseconds($_))
        Write-Output $date
    }
}

function ParseExceptionBody($Response) {
    if ($Response) {
        $Reader = New-Object System.IO.StreamReader($Response.GetResponseStream())
        $Reader.BaseStream.Position = 0
        $Reader.DiscardBufferedData()
        $ResponseBody = $reader.ReadToEnd()
        if ($ResponseBody.StartsWith('{')) {
            $ResponseBody = $ResponseBody | ConvertFrom-Json | ConvertTo-Json
        }
        return $ResponseBody
    }
    else {
        return $Response
    }
}

<#
.EXAMPLE
Connect-OciServer -Name ociserver.example.com -Credential (Get-Credential)

Name       : ociserver.example.com
BaseURI    : https://ociserver.example.com
Credential : System.Management.Automation.PSCredential
Headers    : {Authorization}
APIVersion : 1.2
Timezone   : System.CurrentSystemTimeZone
#>
function global:Connect-OciServer {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                   Position=0,
                   HelpMessage="The name of the OCI Server. This value may also be a string representation of an IP address. If not an address, the name must be resolvable to an address.")][String]$Name,
        [parameter(Mandatory=$False,
                   Position=1,
                   HelpMessage="A System.Management.Automation.PSCredential object containing the credentials needed to log into the OCI server.")][System.Management.Automation.PSCredential]$Credential,
        [parameter(Mandatory=$False,
                   Position=2,
                   HelpMessage="This cmdlet always tries to establish a secure HTTPS connection to the OCI server, but it will fall back to HTTP if necessary. Specify -HTTP to skip the HTTPS connection attempt and only try HTTP.")][Switch]$HTTP,
        [parameter(Mandatory=$False,
                   Position=2,
                   HelpMessage="This cmdlet always tries to establish a secure HTTPS connection to the OCI server, but it will fall back to HTTP if necessary. Specify -HTTPS to fail the connection attempt in that case rather than fall back to HTTP.")][Switch]$HTTPS,
        [parameter(Mandatory=$False,
                   Position=3,
                   HelpMessage="If the OCI server certificate cannot be verified, the connection will fail. Specify -Insecure to ignore the validity of the OCI server certificate.")][Switch]$Insecure,
        [parameter(Position=4,
                   Mandatory=$False,
                   HelpMessage="Specify -Transient to not set the global variable `$CurrentOciServer.")][Switch]$Transient,
        [parameter(Mandatory=$False,
                   Position=5,
                   HelpMessage="As the timezone of the OCI Server is not available via the REST API, it needs to be manually set so that all timestamps are displayed with the correct timezone. By default the timezone will be set to the local timezone of the PowerShell environment.")][PSObject]$Timezone,
        [parameter(Mandatory=$False,
                   Position=6,
                   HelpMessage="Timeout value for HTTP connections. Defaults to 600 seconds.")][Int]$Timeout
    )

    if (!$Credential) {
        $Credential = Get-OciCredential -Name $Name | Select-Object -ExpandProperty Credential
        if (!$Credential) {
            throw "No Credentials supplied and $Name not in list of known OCI Servers"
        }
    }
 
    # Issue with jBoss see http://alihamdar.com/2010/06/19/expect-100-continue/
    [System.Net.ServicePointManager]::Expect100Continue = $false
 
    $EncodedAuthorization = [System.Text.Encoding]::UTF8.GetBytes($Credential.UserName + ':' + $Credential.GetNetworkCredential().Password)
    $EncodedPassword = [System.Convert]::ToBase64String($EncodedAuthorization)
    $Headers = @{"Authorization"="Basic $($EncodedPassword)"}
 
    # check if untrusted SSL certificates should be ignored
    if ($Insecure) {
        [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
    }

    # check if proxy is used
    $ProxyRegistry = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"
    $ProxySettings = Get-ItemProperty -Path $ProxyRegistry
    if ($ProxySettings.ProxyEnable) {
        Write-Warning "Proxy Server $($ProxySettings.ProxyServer) configured in Internet Explorer may be used to connect to the OCI server!"
    }
    if ($ProxySettings.AutoConfigURL) {
        Write-Warning "Proxy Server defined in automatic proxy configuration script $($ProxySettings.AutoConfigURL) configured in Internet Explorer may be used to connect to the OCI server!"
    }
 
    if ($HTTPS -or !$HTTP) {
        Try {
            $BaseURI = "https://$Name"
            $Response = Invoke-RestMethod -Method Post -Uri "$BaseURI/rest/v1/login" -TimeoutSec $Timeout -Headers $Headers
            $APIVersion = $Response.apiVersion
        }
        Catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            if ($_.Exception.Message -match "Unauthorized") {
                Write-Error "Authorization for $BaseURI/rest/v1/login with user $($Credential.UserName) failed"
                return
            }
            else {
                if ($HTTPS) {
                    Write-Error "Login to $BaseURI/rest/v1/login failed via HTTPS protocol, but HTTPS was enforced. Exception $($_.Exception.Message)`n $ResponseBody"
                    return
                }
                else {
                    Write-Warning "Login to $BaseURI/rest/v1/login failed via HTTPS protocol. Exception message: $($_.Exception.Message)`n $ResponseBody"
                    $HTTP = $True
                }
            }
        }
    }

    if ($HTTP) {
        Try {
            $BaseURI = "http://$Name"
            $Response = Invoke-RestMethod -Method Post -Uri "$BaseURI/rest/v1/login" -TimeoutSec $Timeout -Headers $Headers
            $APIVersion = $Response.apiVersion
        }
        Catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            if ($_.Exception.Message -match "Unauthorized") {                
                Write-Error "Authorization for $BaseURI/rest/v1/login with user $($Credential.UserName) failed"
                return
            }
            else {
                Write-Error "Login to $BaseURI/rest/v1/login failed via HTTP protocol. Exception message: $($_.Exception.Message)`n $ResponseBody"
                return
            }
        }
    }

    if (!$Timezone) {
        $Timezone = [timezone]::CurrentTimeZone
    }
    
    if ($Timezone -isnot [Timezone]) {
        if ([System.TimeZoneInfo]::GetSystemTimeZones().Id -contains $Timezone) {
            $Timezone = [System.TimeZoneInfo]::GetSystemTimeZones() | ? { $_.Id -contains $Timezone }
        }
        else {
            $Timezone = [timezone]::CurrentTimeZone
        }
    }

    if (!$Timeout) {
        $Timeout = 600
    }
 
    $Server = New-Object -TypeName psobject
    $Server | Add-Member -MemberType NoteProperty -Name Name -Value $Name
    $Server | Add-Member -MemberType NoteProperty -Name BaseURI -Value $BaseURI
    $Server | Add-Member -MemberType NoteProperty -Name Credential -Value $Credential
    $Server | Add-Member -MemberType NoteProperty -Name Headers -Value $Headers
    $Server | Add-Member -MemberType NoteProperty -Name APIVersion -Value $APIVersion
    $Server | Add-Member -MemberType NoteProperty -Name Timezone -Value $Timezone
    $Server | Add-Member -MemberType NoteProperty -Name Timeout -Value $Timeout
 
    if (!$Transient) {
        Set-Variable -Name CurrentOciServer -Value $Server -Scope Global
    }
 
    return $Server
}

function ParseAcquisitionUnits($AcquisitionUnits) {
    $AcquisitionUnits = @($AcquisitionUnits)
    foreach ($AcquisitionUnit in $AcquisitionUnits) {
        if ($AcquisitionUnit.nextLeaseRenewal) {
            $AcquisitionUnit.nextLeaseRenewal = $AcquisitionUnit.nextLeaseRenewal | Get-Date
        }

        if ($AcquisitionUnit.lastReported) {
            $AcquisitionUnit.lastReported = $AcquisitionUnit.lastReported | Get-Date
        }

        if ($AcquisitionUnit.datasources) {
            $AcquisitionUnit.datasources = ParseDatasources($AcquisitionUnit.datasources)
        } 
        Write-Output $AcquisitionUnit
    }
}

function ParseDatasources($Datasources) {
    $Datasources = @($Datasources)
    foreach ($Datasource in $Datasources) {
        if ($Datasource.lastSuccessfullyAcquired) {
            $Datasource.lastSuccessfullyAcquired = $Datasource.lastSuccessfullyAcquired | Get-Date
        }

        if ($Datasource.resumeTime) {
            $Datasource.resumeTime = $Datasource.resumeTime | Get-Date
        }
        if ($Datasource.AcquisitionUnit) {
            $Datasource.AcquisitionUnit = ParseAcquisitionUnits($Datasource.AcquisitionUnit)
        }
        if ($Datasource.Changes) {
            $Datasource.Changes = ParseChanges($Datasource.Changes)
        }
        if ($Datasource.Events) {
            $Datasource.Events = ParseEvents($Datasource.Events)
        }
        Write-Output $Datasource
    }
}

function ParseChanges($Changes) {
    $Changes = @($Changes)
    foreach ($Change in $Changes) {
        if ($Change.time) {
            $Change.time = $Change.time | Get-Date
        }

        Write-Output $Change
    }
}

function ParseEvents($Events) {
    $Events = @($Events)
    foreach ($Event in $Events) {
        if ($Event.StartTime) {
            $Event.StartTime = $Event.StartTime | Get-Date
        }
        if ($Event.EndTime) {
            $Event.EndTime = $Event.EndTime | Get-Date
        }

        Write-Output $Event
    }
}

function ParseCertificates($Certificates) {
    $Certificates = @($Certificates)
    foreach ($Certificate in $Certificates) {
        if ($Certificate.ExpirationDate) {
            $Certificate.ExpirationDate = $Certificate.ExpirationDate | Get-Date
        }

        Write-Output $Certificate
    }
}

<#
    .SYNOPSIS
    Retrieve all Acquisition Units
    .DESCRIPTION
    Retrieve all Acquisition Units
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=datasources)
    .PARAMETER datasources
    Return list of related Datasources
#>
function Global:Get-OciAcquisitionUnits {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                   Position=0,
                   HelpMessage="OnCommand Insight Server.")]$Server=$CurrentOciServer,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=datasources)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
        if (!$Server) {
            throw "Server parameter not specified and no global OCI Server available. Run Connect-OciServer first!"
        }
    }
   
    Process {
        $Uri = $Server.BaseUri + "/rest/v1/admin/acquisitionUnits"
 
           
        $switchparameters=@("datasources")
        foreach ($parameter in $switchparameters) {
            if ((Get-Variable $parameter).Value) {
                if ($expand) {
                    $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                }
                else {
                    $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                }
            }
        }

        if ($expand) {
            $Uri += "?expand=$expand"
        }

        try {
            $Result = Invoke-RestMethod -TimeoutSec $Server.Timeout -Method GET -Uri $Uri -Headers $Server.Headers
        }
        catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
        }
 
        if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
            $Result = ParseJsonString($Result.Trim())
        }

        $AcquisitionUnits = ParseAcquisitionUnits($Result)
        Write-Output $AcquisitionUnits
    }
}

<#
    .SYNOPSIS
    Retrieve one Acquisition Unit
    .DESCRIPTION
    Retrieve one Acquisition Unit
    .PARAMETER id
    Id of acquisition unit to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=datasources)
    .PARAMETER datasources
    Return list of related Datasources
#>
function Global:Get-OciAcquisitionUnit {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                   Position=0,
                   HelpMessage="OnCommand Insight Server.")]$Server=$CurrentOciServer,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of acquisition unit to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=datasources)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
        if (!$Server) {
            throw "Server parameter not specified and no global OCI Server available. Run Connect-OciServer first!"
        }
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($Server.BaseUri) + "/rest/v1/admin/acquisitionUnits/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("datasources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($expand) {
                $Uri += "?$($Separator)expand=$expand"
            }
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $Server.Timeout -Method GET -Uri $Uri -Headers $Server.Headers
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }

            $AcquisitionUnit = ParseAcquisitionUnits($Result)
            Write-Output $AcquisitionUnit
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all datasources of an acquisition unit
    .DESCRIPTION
    Retrieve all datasources of an acquisition unit
    .PARAMETER id
    ID of acquisition unit to get datasources for
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=datasources)
    .PARAMETER acquisitionUnit
    Return related Acquisition unit
    .PARAMETER note
    Return related Note
    .PARAMETER changes
    Return list of related Changes
    .PARAMETER packages
    Return list of related Packages
    .PARAMETER activePatch
    Return related Active patch
    .PARAMETER events
    Return list of related Events
    .PARAMETER devices
    Return list of related Devices
    .PARAMETER config
    Return related Config
#>
function Global:Get-OciDatasourcesByAcquisitionUnit {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                   Position=0,
                   HelpMessage="OnCommand Insight Server.")]$Server=$CurrentOciServer,
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="ID of acquisition unit to get datasources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=datasources)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
        if (!$Server) {
            throw "Server parameter not specified and no global OCI Server available. Run Connect-OciServer first!"
        }
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $Server.BaseUri + "/rest/v1/admin/acquisitionUnits/$id/datasources"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($expand) {
                $Uri += "?$($Separator)expand=$expand"
            }
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $Server.Timeout -Method GET -Uri $Uri -Headers $Server.Headers
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }

            $Datasources = ParseDatasources($Result)
            Write-Output $Datasources
        }
    }
}

<#
    .SYNOPSIS
    Restart an Acquisition Unit
    .DESCRIPTION
    Restart an Acquisition Unit
    .PARAMETER id
    ID of acquisition unit to restart
#>
function Global:Restart-OciAcquisitionUnit {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                   Position=0,
                   HelpMessage="OnCommand Insight Server.")]$Server=$CurrentOciServer,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of acquisition unit to restart",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
        if (!$Server) {
            throw "Server parameter not specified and no global OCI Server available. Run Connect-OciServer first!"
        }
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $Server.BaseUri + "/rest/v1/admin/acquisitionUnits/$id/restart"
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $Server.Timeout -Method POST -Uri $Uri -Headers $Server.Headers
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve list of certificates
    .DESCRIPTION
    Retrieve list of certificates
#>
function Global:Get-OciCertificates {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                   Position=0,
                   HelpMessage="OnCommand Insight Server.")]$Server=$CurrentOciServer
    )
 
    Begin {
        $Result = $null
        if (!$Server) {
            throw "Server parameter not specified and no global OCI Server available. Run Connect-OciServer first!"
        }
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $Server.BaseUri + "/rest/v1/admin/certificates"
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $Server.Timeout -Method GET -Uri $Uri -Headers $Server.Headers
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
       
            $Certificates = ParseCertificates($Result)
            Write-Output $Certificates
        }
    }
}


# TODO: Check and implement uploading of certificates

<#
    .SYNOPSIS
    Add a certificate based on source host/port or certificate file
    .DESCRIPTION
    User can add certificate for LDAP based on either source host/port or certificate file. Two ways to create certificate are supported: <br/>

To create from host and port use:
<pre>
{
    "host": "localhost",
    "port": 389
}
</pre>

To create from existing certificate file create a multi part request with the attributes:
<pre>
    alias: the alias for certificate in store
    certificateFile: the actual file to load into store
</pre>
      

#>
function Global:Create-OciCertificate {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/certificates" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all data source types.
    .DESCRIPTION
    Retrieve all data source types.
#>
function Global:Get-OciDatasourceTypes {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                   Position=0,
                   HelpMessage="OnCommand Insight Server.")]$Server=$CurrentOciServer
    )
 
    Begin {
        $Result = $null
        if (!$Server) {
            throw "Server parameter not specified and no global OCI Server available. Run Connect-OciServer first!"
        }
    }
   
    Process {
        $Uri = $Server.BaseUri + "/rest/v1/admin/datasourceTypes"
 
        try {
            $Result = Invoke-RestMethod -TimeoutSec $Server.Timeout -Method GET -Uri $Uri -Headers $Server.Headers
        }
        catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
        }
 
        if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
            $Result = ParseJsonString($Result.Trim())
        }
       
        Write-Output $Result
    }
}

<#
    .SYNOPSIS
    Retrieve one data source type.
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source type
#>
function Global:Get-OciDatasourceType {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source type",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasourceTypes/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all Data Sources
    .DESCRIPTION
    
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=acquisitionUnit)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasources {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=acquisitionUnit)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Create Data Source
    .DESCRIPTION
    Request payload for new datasource should contain JSON in the format that is obtained by using following expands on GET one datasource: acquisitionUnit,config<br/>
<pre>
    {
      "name": "datasource_name",
      "acquisitionUnit": {
        "id": "1"
      },
      "config": {
        "vendor": "VMware",
        "model": "vSphere (Web Services)",
        "packages":
        [
          {
            "id": "foundation",
            "attributes":
            {
              "ip": "127.0.0.0"
            }
          }
        ]
      }
    }
</pre>
                
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Add {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Datasource event details
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source event to get data for
#>
function Global:Get-OciDatasourceEventDetails {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source event to get data for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/events/{id}/details" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Remove one Data Source
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to remove
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Remove-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to remove",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Data Source
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=acquisitionUnit)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=acquisitionUnit)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update one Data Source.
    .DESCRIPTION
    Request payload for datasource to be updated should contain JSON in the format that is obtained by using following expands on GET one datasource: acquisitionUnit,config <br/>
<pre>
    {
      "name": "datasource_name",
      "acquisitionUnit": {
        "id": "1"
      },
      "config": {
        "packages":
        [
          {
            "id": "foundation",
            "attributes":
            {
              "ip": "127.0.0.0"
            }
          }
        ]
      }
    }
</pre>
            
    .PARAMETER id
    Id of data source to update
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Update-Oci {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Data Source Acquisition Unit.
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to retrieve
        .PARAMETER datasources
        Return list of related Datasources
#>
function Global:Get-OciDatasourceAcquisitionUnit {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/acquisitionUnit" -replace "{id}","$id"
 
           
            $switchparameters=@("datasources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieves the active patch for a data source
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to find active patch
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER datasourceConclusions
        Return list of related Patched datasources status
#>
function Global:Get-OciActivePatchByDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to find active patch",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Patched datasources status")][Switch]$datasourceConclusions
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/activePatch" -replace "{id}","$id"
 
           
            $switchparameters=@("datasourceConclusions")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Data Source changes
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to get data for
        .PARAMETER details
        Return list of related Details
#>
function Global:Get-OciDatasourceChanges {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to get data for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Details")][Switch]$details
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/changes" -replace "{id}","$id"
 
           
            $switchparameters=@("details")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Datasource config.
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to retrieve
#>
function Global:Get-OciConfigByDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/config" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve devices
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to get devices for
#>
function Global:Get-OciDatasourceDevices {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to get devices for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/devices" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Data Source events (audits)
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to get data for
        .PARAMETER details
        Return list of related Details
#>
function Global:Get-OciDatasourceEvents {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to get data for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Details")][Switch]$details
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/events" -replace "{id}","$id"
 
           
            $switchparameters=@("details")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Data Source note
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to retrieve note for
#>
function Global:Get-OciDatasourceNote {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to retrieve note for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/note" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update one Data Source note
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>
{
    "value":"My Note"
}
</pre>
            
    .PARAMETER id
    Id of data source to update
    .PARAMETER value
    Note to be added to datasource
#>
function Global:Update-OciDatasourceNote {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Note to be added to datasource")][String]$value
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/note" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: {`"value`":$value}"
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "{`"value`":$value}" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Data Source package status
    .DESCRIPTION
    
    .PARAMETER id
    Id of data source to get data for
#>
function Global:Get-OciDatasourcePackageStatuses {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to get data for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/packages" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Poll one Data Source
    .DESCRIPTION
    Empty POST body
    .PARAMETER id
    Id of data source to poll
#>
function Global:Poll-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to poll",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/poll" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Postpone one Data Source
    .DESCRIPTION
    Input body: { "days": value }
    .PARAMETER id
    Id of data source to postpone
    .PARAMETER Days
    Number of days to postpone datasource polling
#>
function Global:Suspend-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to postpone",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Number of days to postpone datasource polling")][Long]$Days
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/postpone" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: {`"days`":$days}"
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "{`"days`":$days}" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Resume one Data Source
    .DESCRIPTION
    Empty POST body
    .PARAMETER id
    Id of data source to resume
#>
function Global:Resume-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to resume",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/resume" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Test Data Source
    .DESCRIPTION
    Empty POST body
    .PARAMETER id
    Id of data source to test
#>
function Global:Test-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of data source to test",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/{id}/test" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve LDAP configuration
    .DESCRIPTION
    

#>
function Global:Get-Oci {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/ldap" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update LDAP config
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>
{
    "isEnabled": true,
    "directoryLookup": {
        "server": "ldap://localhost",
        "timeout": 1000,
        "referral": "follow",
        "userName": "directoryLookupUserName",
        "password": "directoryLookupUserPassword",
        "domain": "DC=domain,DC=com"
    },
    "groups": {
        "users": "insight.users",
        "guests": "insight.guests",
        "admins": "insight.admins",
        "serverAdmins": "insight.server.admins"
    },
    "attributes": {
        "role": "memberOf",
        "mail": "mail",
        "userPrincipalName": "userPrincipalName",
        "distinguishedName": "distinguishedName"
    }
}
</pre>
      

#>
function Global:Update {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/ldap" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Perform an LDAP connection test
    .DESCRIPTION
    Request body to include information on LDAP server and credentials to test. Request body should be like JSON below: <br/>

<pre>
{
  "server": "ldap://localhost",
  "userName": "user",
  "password": "password"
}
</pre>
      

#>
function Global:Connect-OciTest {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/ldap/test" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve license status
    .DESCRIPTION
    

#>
function Global:Get-OciLicense {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/license" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update license information
    .DESCRIPTION
    Request body should be list of license keys, example: <br/>

<pre>
[
    "TEST1234567890LicenceKey1",
    "TEST1234567890LicenceKey2"
]
</pre>
        

#>
function Global:Update {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/license" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Replace license information
    .DESCRIPTION
    Request body should be list of license keys, example:<br/>

<pre>
    [
        "TEST1234567890LicenceKey1",
        "TEST1234567890LicenceKey2"
    ]
</pre>
            

#>
function Global:Replace-OciLicense {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/license" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all patches
    .DESCRIPTION
    
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER datasourceConclusions
        Return list of related Patched datasources status
#>
function Global:Get-OciPatches {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Patched datasources status")][Switch]$datasourceConclusions
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches" -replace "{id}","$id"
 
           
            $switchparameters=@("datasourceConclusions")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Create Patch
    .DESCRIPTION
    POST request to include 'patchFile' file parameter
        .PARAMETER datasourceConclusions
        Return list of related Patched datasources status
#>
function Global:Add-OciPatches {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Return list of related Patched datasources status")][Switch]$datasourceConclusions
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches" -replace "{id}","$id"
 
           
            $switchparameters=@("datasourceConclusions")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one patch
    .DESCRIPTION
    
    .PARAMETER id
    Id of a patch to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER datasourceConclusions
        Return list of related Patched datasources status
#>
function Global:Update-OciPatch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of a patch to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Patched datasources status")][Switch]$datasourceConclusions
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("datasourceConclusions")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update one patch
    .DESCRIPTION
    POST request to include 'patchFile' file parameter
    .PARAMETER id
    Id of patch to update
        .PARAMETER datasourceConclusions
        Return list of related Patched datasources status
#>
function Global:Update {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of patch to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Patched datasources status")][Switch]$datasourceConclusions
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("datasourceConclusions")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Approve one patch
    .DESCRIPTION
    Empty body
    .PARAMETER id
    Id of patch to approve
#>
function Global:Approve-OciPatch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of patch to approve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches/{id}/approve" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Patch Data Sources
    .DESCRIPTION
    
    .PARAMETER id
    Id of patch to get data sources for
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
#>
function Global:Get-OciPatchDatasources {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of patch to get data sources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches/{id}/datasourceConclusions" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update one patch note
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>
{
    "value": "My Note"
}
</pre>
                
    .PARAMETER id
    Id of patch to update
#>
function Global:Update-OciPatchNote {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of patch to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches/{id}/note" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Rollback one patch
    .DESCRIPTION
    Empty body
    .PARAMETER id
    Id of patch to rolback
#>
function Global:Rollback-OciPatch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of patch to rolback",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/patches/{id}/rollback" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all users
    .DESCRIPTION
    

#>
function Global:Get-OciUsers {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/users" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Create a new user
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>
{
    "name":"test",
    "password": "pwd",
    "email": "email@test.com",
    "insightRole": "USER",
    "isActive": false
}
</pre>
            

#>
function Global:Add-OciUsers {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/users" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve current user
    .DESCRIPTION
    

#>
function Global:Get-OciCurrentUser {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/users/current" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete one user
    .DESCRIPTION
    
    .PARAMETER id
    The id of user to delete
#>
function Global:Delete-OciUser {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="The id of user to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/users/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one user
    .DESCRIPTION
    
    .PARAMETER id
    The id of user to retrieve
#>
function Global:Get-OciUser {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="The id of user to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/users/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update one user
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>
{
    "password": "pwd",
    "email": "email@test.com",
    "insightRole": "USER",
    "isActive": false
}
</pre>
            
    .PARAMETER id
    The id of user to update
#>
function Global:Update-OciUser {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="The id of user to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/users/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all annotation definitions
    .DESCRIPTION
    

#>
function Global:Get-OciAnnotations {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Create annotation definition
    .DESCRIPTION
    Request body should include required name, type, optional description and enumValues (if enum type). Enums should contain name and label. Example: <br/>
<pre>
{
    "name": "StorageLocation",
    "type": "FIXED_ENUM",
    "description": "Storage Location",
    "enumValues": [
        {
          "name": "PT_LISBON",
          "label": "Lisbon (Portugal)"
        },
        {
          "name": "US_WALTHAM",
          "label": "Waltham (USA)"
        }
    ]
}
</pre>
        

#>
function Global:Create-OciDefinition {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotation definition by id or name
    .DESCRIPTION
    
    .PARAMETER id
    Id or name of annotation definition to delete
#>
function Global:Remove-OciDefinition {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotation definition by id or name
    .DESCRIPTION
    
    .PARAMETER id
    Id or name of annotation definition to retrieve
#>
function Global:Get-OciAnnotation {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotation definition by id or name
    .DESCRIPTION
    Request body could include optional name, description, enum values. Enums should contain name and label. Example: <br/>

<pre>
{
    "name": "MyStorageLocation",
    "description": "My Storage Location",
    "enumValues": [
        {
          "name": "PT_LISBON",
          "label": "Lisbon (Portugal)"
        },
        {
          "name": "US_WALTHAM",
          "label": "Waltham (USA)"
        },
        {
          "name": "US_SUNNYVALE",
          "label": "Sunnyvale (USA)"
        }
    ]
}
</pre>
        
    .PARAMETER id
    Id or name of annotation definition to update
#>
function Global:Update-OciDefinition {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Remove object annotations in bulk by annotation definition
    .DESCRIPTION
    'targets' in response contains target object IDs. Request body should be like JSON below: <br/>

<pre>
[
  {
    "objectType": "StoragePool",
    "targets": [
       "2052",
       "8739",
       "5926"
    ]
  }
]
</pre>
            
    .PARAMETER id
    Id or name of annotation definition to update
#>
function Global:Remove-OciDefinitionValues {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}/values" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotation definition values for all supported object types
    .DESCRIPTION
    'values.targets' in response contains URLs for target objects
    .PARAMETER id
    Id or name of annotation definition to retrieve values for
#>
function Global:Get-OciAnnotationValues {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to retrieve values for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}/values" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update object annotations in bulk by annotation definition
    .DESCRIPTION
    'values.targets' in response contains target object IDs. Request body should be like JSON below: <br/>

<pre>
[
  {
    "objectType": "StoragePool",
    "values": [
      {
        "rawValue": "Bronze",
        "targets": [
          "11299",
          "11305"
        ]
      },
      {
        "rawValue": "Gold",
        "targets": [
          "16398",
          "8721"
        ]
      },
      {
        "rawValue": "Silver",
        "targets": [
          "26644"
        ]
      },
      {
        "rawValue": "Gold-Fast",
        "targets": [
          "2052",
          "8739",
          "5926"
        ]
      }
    ]
  }
]
</pre>
            
    .PARAMETER id
    Id or name of annotation definition to update
    .PARAMETER objectType
    Object type of objects where annotations should be added (e.g. StoragePool or InternalVolume)
    .PARAMETER rawValue
    Value of Annotation
    .PARAMETER targets
    IDs of object where annotation should be added
#>
function Global:Update-OciAnnotationValues {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Object type of objects where annotations should be added (e.g. StoragePool or InternalVolume)")][String]$objectType,
        [parameter(Mandatory=$True,
                    Position=2,
                    HelpMessage="Value of Annotation")][String]$rawValue,
        [parameter(Mandatory=$True,
                    Position=3,
                    HelpMessage="IDs of object where annotation should be added")][String[]]$targets
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}/values" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: [ { `"objectType`": `"$objectType`",`"values`": [ { `"rawValue`": `"$rawValue`", `"targets`": [ `"$($targets -join ",")`" ] } ] } ]"
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "[ { `"objectType`": `"$objectType`",`"values`": [ { `"rawValue`": `"$rawValue`", `"targets`": [ `"$($targets -join ",")`" ] } ] } ]" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotation definition values for one supported object type
    .DESCRIPTION
    'targets' in response contains URLs for target objects
    .PARAMETER id
    Id or name of annotation definition to retrieve
    .PARAMETER objectType
    The object type to retrieve values for
#>
function Global:Get-OciAnnotationValuesByObjectType {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="The object type to retrieve values for")][String]$objectType
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}/values/{objectType}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotation definition targets for one supported object type, one specific value
    .DESCRIPTION
    Returns list of URLs for objects for annotation, object type, value
    .PARAMETER id
    Id or name of annotation definition to retrieve
    .PARAMETER objectType
    The object type to retrieve target objects for
    .PARAMETER value
    The specific value to retrieve target objects for
#>
function Global:Update-OciAnnotationValuesByObjectTypeAndValue {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id or name of annotation definition to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="The object type to retrieve target objects for")][String]$objectType,
        [parameter(Mandatory=$True,
                    Position=2,
                    HelpMessage="The specific value to retrieve target objects for")][String]$value
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/annotations/{id}/values/{objectType}/{value}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all applications
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciApplications {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add a new application
    .DESCRIPTION
    Request body should contain valid application name, priority and and optional business entity ID and ignoreShareViolations, example: <br/>

            <pre>
            {
                "name":"Test",
                "priority":"Low",
                "ignoreShareViolations":false,
                "businessEntity": {
                    "id": "123"
                }
            }
            </pre>
                    
    .PARAMETER name
    Name of the application
    .PARAMETER priority
    Name of the application
    .PARAMETER businessEntity
    Business entity of the application
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Add-OciApplication {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Name of the application")][String]$name,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Name of the application")][String]$priority,
        [parameter(Mandatory=$True,
                    Position=2,
                    HelpMessage="Business entity of the application")][String]$businessEntity,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: { `"name`": `"$name`", `"priority`": `"$priority`", `"businessEntity`": { `"id`": `"$businessEntity`" } }"
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "{ `"name`": `"$name`", `"priority`": `"$priority`", `"businessEntity`": { `"id`": `"$businessEntity`" } }" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from assets
    .DESCRIPTION
    Request body should contain a list application ids mapped to a list of asset ids, grouped by type, example: <br/>

<pre>
[
    {
        "123": [
            {
                "objectType": "Qtree",
                "targets": [
                    "11299",
                    "11305"
                ]
            },
            {
                "objectType": "InternalVolume",
                "targets": [
                    "11299",
                    "11305"
                ]
            }
        ]
    },
    {
        "456": [
            {
                "objectType": "VirtualMachine",
                "targets": [
                    "2052",
                    "8739"
                ]
            }
        ]
    }
]
</pre>
            
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAssets {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/assets" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to assets
    .DESCRIPTION
    Request body should contain a list application ids mapped to a list of asset ids, grouped by type, example: <br/>

<pre>
[
    {
        "123": [
            {
                "objectType": "Qtree",
                "targets": [
                    "11299",
                    "11305"
                ]
            },
            {
                "objectType": "InternalVolume",
                "targets": [
                    "11299",
                    "11305"
                ]
            }
        ]
    },
    {
        "456": [
            {
                "objectType": "VirtualMachine",
                "targets": [
                    "2052",
                    "8739"
                ]
            }
        ]
    }
]
</pre>
            
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAssets {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/assets" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete an application
    .DESCRIPTION
    
    .PARAMETER id
    Id of application to delete
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Delete {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve application
    .DESCRIPTION
    
    .PARAMETER id
    Id of application to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciApplication {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update an application
    .DESCRIPTION
    Request body should contain valid application priority and business entity ID, example: <br/>

        <pre>
        {
            "priority":"Low",
            "ignoreShareViolations": false,
            "businessEntity": {
                "id": "123"
            }
        }
        </pre>
                    
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign application from assets
    .DESCRIPTION
    Request body should contain a list of asset ids, grouped by type, example: <br/>

<pre>
[
    {
        "objectType": "StoragePool"
        "targets": [
            "11299",
            "11305"
        ]
    },
    {
        "objectType": "VirtualMachine"
        "targets": [
            "2052",
            "8739"
        ]
    }
]
</pre>
            
    .PARAMETER id
    Id of application to un-assign from assets
#>
function Global:Bulk-OciUnAssignApplicationFromAssets {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to un-assign from assets",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}/assets" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve assets for application
    .DESCRIPTION
    
    .PARAMETER id
    Id of application to retrieve assets for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
#>
function Global:Get-OciApplicationAssets {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to retrieve assets for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}/assets" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign application to assets
    .DESCRIPTION
    Request body should contain lists of asset ids, grouped by type, example: <br/>

<pre>
[
    {
        "objectType": "Volume",
        "targets": [
            "11299",
            "11305"
        ]
    },
    {
        "objectType": "VirtualMachine",
        "targets": [
            "2052",
            "8739"
        ]
    }
]
</pre>
            
    .PARAMETER id
    Id of application to assign to assets
#>
function Global:Bulk-OciAssignApplicationToAssets {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to assign to assets",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}/assets" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve compute resources for application
    .DESCRIPTION
    
    .PARAMETER id
    Id of application to retrieve compute resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciComputeResourcesByApplication {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to retrieve compute resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}/computeResources" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve resources for application
    .DESCRIPTION
    
    .PARAMETER id
    Id of application to retrieve storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByApplication {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of application to retrieve storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/applications/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all business entities
    .DESCRIPTION
    

#>
function Global:Get-OciBusinessEntities {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/businessEntities" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add a new business entity
    .DESCRIPTION
    At least one of tenant, lob, businessUnit and project in request body should have valid value. Example: <br/>

            <pre>
            {
                "tenant":"tenant1",
                "lob":"lob1",
                "businessUnit":"businessUnit1",
                "project":"project1"
            }
            </pre>
                    

#>
function Global:Add {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/businessEntities" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete a business entity
    .DESCRIPTION
    
    .PARAMETER id
    Id of business entity to delete
#>
function Global:Delete {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of business entity to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/businessEntities/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve business entity with empty fields set to N/A
    .DESCRIPTION
    
    .PARAMETER id
    Id of business entity to retrieve
#>
function Global:Get-OciBusinessEntity {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of business entity to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/businessEntities/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all datastores
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER sort
    Filter for sorting by metric/s
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER limit
    Number of datastores per page.
    .PARAMETER offset
    Offset to be used with limit
        .PARAMETER performance
        Return related Performance
        .PARAMETER hosts
        Return list of related Hosts
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDatastores {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for sorting by metric/s")][String]$sort,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Number of datastores per page.")][Long]$limit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Hosts")][Switch]$hosts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","hosts","vmdks","datasources","storageResources","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of datastores.
    .DESCRIPTION
    

#>
function Global:Get-OciCount {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one datastore
    .DESCRIPTION
    
    .PARAMETER id
    Id of datastore to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER hosts
        Return list of related Hosts
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of datastore to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Hosts")][Switch]$hosts,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","hosts","vmdks","datasources","storageResources","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a datastore.
    .DESCRIPTION
    
    .PARAMETER id
    Id of datastore to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByDataStore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of datastore to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all hosts mapped to a datastore.
    .DESCRIPTION
    
    .PARAMETER id
    Id of the datastore to retrieve the hosts
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER virtualMachines
        Return list of related Virtual machines
        .PARAMETER dataCenter
        Return related Data center
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER clusterHosts
        Return list of related Cluster hosts
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciHostsByDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the datastore to retrieve the hosts",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Virtual machines")][Switch]$virtualMachines,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Data center")][Switch]$dataCenter,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Cluster hosts")][Switch]$clusterHosts,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/hosts" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","applications","virtualMachines","dataCenter","annotations","clusterHosts","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one datastore performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of datastore to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciDatastorePerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of datastore to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storage resources mapped to a datastore.
    .DESCRIPTION
    
    .PARAMETER id
    Id of the datastore to retrieve the storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the datastore to retrieve the storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all Vmdks belonging to a datastore.
    .DESCRIPTION
    
    .PARAMETER id
    Id of the datastore to retrieve the Vmdks
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER virtualMachine
        Return related Virtual machine
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVmdksByDatastore {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the datastore to retrieve the Vmdks",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return related Virtual machine")][Switch]$virtualMachine,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/dataStores/{id}/vmdks" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","dataStore","storageResources","virtualMachine","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage pool disk
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool disk to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER backendVolumes
        Return list of related Backend volumes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool disk to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Backend volumes")][Switch]$backendVolumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","storagePools","performance","storageResources","backendVolumes","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve backend volumes of a virtual disk.
    .DESCRIPTION
    
    .PARAMETER id
    Id of the virtual disk to retrieve backend volumes for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciBackendVolumesByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the virtual disk to retrieve backend volumes for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/backendVolumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a disk.
    .DESCRIPTION
    
    .PARAMETER id
    Id of disk to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of disk to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one disk performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of disk to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciDiskPerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of disk to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage pools for disk
    .DESCRIPTION
    
    .PARAMETER id
    Id of disk to retrieve storage pools for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStoragePoolsByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of disk to retrieve storage pools for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/storagePools" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","storageResources","internalVolumes","volumes","disks","datasources","storageNodes","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage resources for disk
    .DESCRIPTION
    
    .PARAMETER id
    Id of disk to retrieve resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByDisk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of disk to retrieve resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/disks/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all fabrics
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER limit
    Number of fabrics per page.
    .PARAMETER offset
    Offset to be used with limit
        .PARAMETER switches
        Return list of related Switches
        .PARAMETER datasources
        Return list of related Datasources
#>
function Global:Get-OciFabrics {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Number of fabrics per page.")][Long]$limit,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Switches")][Switch]$switches,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics" -replace "{id}","$id"
 
           
            $switchparameters=@("switches","datasources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of fabrics.
    .DESCRIPTION
    

#>
function Global:Get-OciCount {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one fabric
    .DESCRIPTION
    
    .PARAMETER id
    Id of fabric to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER switches
        Return list of related Switches
        .PARAMETER datasources
        Return list of related Datasources
#>
function Global:Get-OciFabric {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of fabric to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Switches")][Switch]$switches,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("switches","datasources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Datasources for one fabric
    .DESCRIPTION
    
    .PARAMETER id
    Id of fabric to retrieve datasources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByFabric {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of fabric to retrieve datasources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Ports for one fabric
    .DESCRIPTION
    
    .PARAMETER id
    Id of fabric to retrieve ports for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER limit
    Limit for number of ports in fabric to retrieve
    .PARAMETER sort
    sort will specify the field name on which sorting to be applied
    .PARAMETER offset
    Offset to be used with limit
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsByFabric {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of fabric to retrieve ports for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$True,
                    Position=4,
                    HelpMessage="Limit for number of ports in fabric to retrieve")][Long]$limit,
        [parameter(Mandatory=$True,
                    Position=5,
                    HelpMessage="sort will specify the field name on which sorting to be applied")][String]$sort,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of ports by fabric with performance.
    .DESCRIPTION
    
    .PARAMETER id
    Id of fabric to retrieve ports for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
#>
function Global:Get-OciPortsByFabricCount {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of fabric to retrieve ports for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics/{id}/ports/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve switches for one fabric
    .DESCRIPTION
    
    .PARAMETER id
    Id of fabric to retrieve switches for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER fabric
        Return related Fabric
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciSwitchesByFabric {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of fabric to retrieve switches for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Fabric")][Switch]$fabric,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fabrics/{id}/switches" -replace "{id}","$id"
 
           
            $switchparameters=@("fabric","performance","ports","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one file system
    .DESCRIPTION
    
    .PARAMETER id
    Id of file system to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER computeResource
        Return related Compute resource
#>
function Global:Get-OciFilesystem {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of file system to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Compute resource")][Switch]$computeResource
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fileSystems/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storageResources","vmdks","computeResource")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve compute resource for a file system
    .DESCRIPTION
    
    .PARAMETER id
    Id of file system to retrieve the compute resource for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciComputeResourceByFileSystem {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of file system to retrieve the compute resource for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fileSystems/{id}/computeResource" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage resources for a file system
    .DESCRIPTION
    
    .PARAMETER id
    Id of file system to retrieve the storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResorcesByFileSystem {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of file system to retrieve the storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fileSystems/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve VMDKs for a file system
    .DESCRIPTION
    
    .PARAMETER id
    Id of file system to retrieve the VMDKs for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER virtualMachine
        Return related Virtual machine
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVmdksByFileSystem {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of file system to retrieve the VMDKs for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return related Virtual machine")][Switch]$virtualMachine,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/fileSystems/{id}/vmdks" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","dataStore","storageResources","virtualMachine","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all hosts
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER sort
    Filter for sorting by metric/s
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER limit
    Number of hosts per page.
    .PARAMETER offset
    Offset to be used with limit
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER virtualMachines
        Return list of related Virtual machines
        .PARAMETER dataCenter
        Return related Data center
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER clusterHosts
        Return list of related Cluster hosts
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciHosts {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for sorting by metric/s")][String]$sort,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Number of hosts per page.")][Long]$limit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Virtual machines")][Switch]$virtualMachines,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Data center")][Switch]$dataCenter,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Cluster hosts")][Switch]$clusterHosts,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","applications","virtualMachines","dataCenter","annotations","clusterHosts","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of hosts.
    .DESCRIPTION
    

#>
function Global:Get-OciCount {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER virtualMachines
        Return list of related Virtual machines
        .PARAMETER dataCenter
        Return related Data center
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER clusterHosts
        Return list of related Cluster hosts
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Virtual machines")][Switch]$virtualMachines,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Data center")][Switch]$dataCenter,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Cluster hosts")][Switch]$clusterHosts,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","applications","virtualMachines","dataCenter","annotations","clusterHosts","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByHosts {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByHosts {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete application from object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to delete application from
    .PARAMETER appId
    Id of application to delete from object
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete application from",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of application to delete from object")][Long]$appId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/applications/{appId}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the hosts from same cluster of host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve cluster hosts for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER virtualMachines
        Return list of related Virtual machines
        .PARAMETER dataCenter
        Return related Data center
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER clusterHosts
        Return list of related Cluster hosts
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciClusterHostsByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve cluster hosts for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Virtual machines")][Switch]$virtualMachines,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Data center")][Switch]$dataCenter,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Cluster hosts")][Switch]$clusterHosts,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/clusterHosts" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","applications","virtualMachines","dataCenter","annotations","clusterHosts","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the data center of host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
#>
function Global:Get-OciDataCenterByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/dataCenter" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a host.
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the file systems of host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve file systems for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER computeResource
        Return related Compute resource
#>
function Global:Get-OciFileSystemsByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve file systems for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Compute resource")][Switch]$computeResource
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/fileSystems" -replace "{id}","$id"
 
           
            $switchparameters=@("storageResources","vmdks","computeResource")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one host performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciHostPerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the ports of host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storage resources by host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the virtual machines of host
    .DESCRIPTION
    
    .PARAMETER id
    Id of host to retrieve virtual machines  for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER host
        Return related Host
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVirtualMachinesByHost {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of host to retrieve virtual machines  for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Host")][Switch]$host,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/hosts/{id}/virtualMachines" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","dataStore","host","vmdks","applications","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePool
        Return related Storage pool
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Storage pool")][Switch]$storagePool,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePool","volumes","storageNodes","annotations","datasources","replicaSources","qtrees","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciApplicationsByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
    .PARAMETER applicationId
    Valid application id which should be associated
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciApplicationsByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Valid application id which should be associated")][String]$applicationId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: { `"id`": `"$applicationId`" }"
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "{ `"id`": `"$applicationId`" }" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete application from object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to delete application from
    .PARAMETER appId
    Id of application to delete from object
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete application from",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of application to delete from object")][Long]$appId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/applications/{appId}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all compute resources for an internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve compute resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciComputeResourcesByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve compute resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/computeResources" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all data stores for an internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve data stores for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER hosts
        Return list of related Hosts
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDataStoresByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve data stores for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Hosts")][Switch]$hosts,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/dataStores" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","hosts","vmdks","datasources","storageResources","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the datasources for an internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve datasource for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve datasource for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve internal volume performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciInternalVolumePerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve qtrees for one internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve storage qtrees for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER volumes
        Return list of related Volumes
#>
function Global:Get-OciQtreesByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve storage qtrees for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/qtrees" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","internalVolume","shares","annotations","applications","volumes")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all replica source internal volumes for an internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve replica source internal volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePool
        Return related Storage pool
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciSourceInternalVolumesByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve replica source internal volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Storage pool")][Switch]$storagePool,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/replicaSources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePool","volumes","storageNodes","annotations","datasources","replicaSources","qtrees","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storage nodes for an internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve storage nodes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER partner
        Return related HA partner
        .PARAMETER performance
        Return related Performance
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageNodesByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve storage nodes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related HA partner")][Switch]$partner,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/storageNodes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","partner","performance","datasources","storagePools","ports","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all volumes for an internal volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of internal volume to retrieve volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVolumesByInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of internal volume to retrieve volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/internalVolumes/{id}/volumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one port
    .DESCRIPTION
    
    .PARAMETER id
    Id of port to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of port to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve connected ports for one port
    .DESCRIPTION
    
    .PARAMETER id
    Id of port to retrieve connected port for
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciConnectedPortsByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of port to retrieve connected port for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/connectedPorts" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a port.
    .DESCRIPTION
    
    .PARAMETER id
    Id of port to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of port to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one device for port
    .DESCRIPTION
    
    .PARAMETER id
    Id of port to retrieve device
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
#>
function Global:Get-OciDeviceByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of port to retrieve device",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/device" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Fabric for port
    .DESCRIPTION
    
    .PARAMETER id
    Id of port to retrieve fabric
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
        .PARAMETER switches
        Return list of related Switches
        .PARAMETER datasources
        Return list of related Datasources
#>
function Global:Get-OciFabricsByPort {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of port to retrieve fabric",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Switches")][Switch]$switches,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/fabrics" -replace "{id}","$id"
 
           
            $switchparameters=@("switches","datasources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one port performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of port to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciPortPerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of port to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/ports/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Qtree
    .DESCRIPTION
    
    .PARAMETER id
    Id of qtree to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER volumes
        Return list of related Volumes
#>
function Global:Get-Oci {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of qtree to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","internalVolume","shares","annotations","applications","volumes")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete application from object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to delete application from
    .PARAMETER appId
    Id of application to delete from object
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete application from",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of application to delete from object")][Long]$appId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/applications/{appId}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve internal volume for given qtree
    .DESCRIPTION
    
    .PARAMETER id
    Id of qtree to retrieve internal volume for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePool
        Return related Storage pool
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciInternalVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of qtree to retrieve internal volume for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Storage pool")][Switch]$storagePool,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/internalVolume" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePool","volumes","storageNodes","annotations","datasources","replicaSources","qtrees","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve shares for one qtree
    .DESCRIPTION
    
    .PARAMETER id
    Id of qtree to retrieve shares for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
#>
function Global:Get-OciSharesByQtree {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of qtree to retrieve shares for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Applications")][Switch]$applications
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/shares" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","qtree","annotations","applications")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage for given qtree
    .DESCRIPTION
    
    .PARAMETER id
    Id of qtree to retrieve storage for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of qtree to retrieve storage for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/storage" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve volumes for one qtree
    .DESCRIPTION
    
    .PARAMETER id
    Id of qtree to retrieve volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVolumesByQtree {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of qtree to retrieve volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/qtrees/{id}/volumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Share
    .DESCRIPTION
    
    .PARAMETER id
    Id of share to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
#>
function Global:Get-Oci {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of share to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Applications")][Switch]$applications
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","qtree","annotations","applications")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete application from object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to delete application from
    .PARAMETER appId
    Id of application to delete from object
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete application from",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of application to delete from object")][Long]$appId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/applications/{appId}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve qtree for given share
    .DESCRIPTION
    
    .PARAMETER id
    Id of share to retrieve qtree for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER volumes
        Return list of related Volumes
#>
function Global:Get-OciQtree {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of share to retrieve qtree for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/qtree" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","internalVolume","shares","annotations","applications","volumes")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage for given share
    .DESCRIPTION
    
    .PARAMETER id
    Id of share to retrieve storage for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of share to retrieve storage for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/shares/{id}/storage" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage node
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage node to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER partner
        Return related HA partner
        .PARAMETER performance
        Return related Performance
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage node to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related HA partner")][Switch]$partner,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","partner","performance","datasources","storagePools","ports","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByStorageNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByStorageNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByStorageNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage node datasources
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage node to retrieve datasources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByStorageNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage node to retrieve datasources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage node performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage node to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciStorageNodePerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage node to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all ports by node
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage node to retrieve ports for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsByStorageNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage node to retrieve ports for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storage pools by node
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage node to retrieve storage pool for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStoragePoolsByNode {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage node to retrieve storage pool for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storageNodes/{id}/storagePools" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","storageResources","internalVolumes","volumes","disks","datasources","storageNodes","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage pool
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","storageResources","internalVolumes","volumes","disks","datasources","storageNodes","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage pool datasources
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve datasources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve datasources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Disks for storage pool
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve disks for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER backendVolumes
        Return list of related Backend volumes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDisksByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve disks for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Backend volumes")][Switch]$backendVolumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/disks" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","storagePools","performance","storageResources","backendVolumes","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve internal volumes for storage pool
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve internal volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePool
        Return related Storage pool
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciInternalVolumesByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve internal volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Storage pool")][Switch]$storagePool,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/internalVolumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePool","volumes","storageNodes","annotations","datasources","replicaSources","qtrees","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage pool performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciStoragePoolPerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage pool storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve storage for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve storage for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/storage" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage nodes for storage pool
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve storage nodes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER partner
        Return related HA partner
        .PARAMETER performance
        Return related Performance
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageNodesByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve storage nodes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related HA partner")][Switch]$partner,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/storageNodes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","partner","performance","datasources","storagePools","ports","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve resources for storage pool
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve volumes for storage pool
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage pool to retrieve volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVolumesByStoragePool {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage pool to retrieve volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storagePools/{id}/volumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storages
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER sort
    Filter for sorting by metric/s
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER limit
    Number of storages per page.
    .PARAMETER offset
    Offset to be used with limit
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorages {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for sorting by metric/s")][String]$sort,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Number of storages per page.")][Long]$limit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of storages.
    .DESCRIPTION
    

#>
function Global:Get-OciCount {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a storage.
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve disks for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve disks for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER backendVolumes
        Return list of related Backend volumes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDisksByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve disks for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Backend volumes")][Switch]$backendVolumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/disks" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","storagePools","performance","storageResources","backendVolumes","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve internal volumes for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve internal volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePool
        Return related Storage pool
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciInternalVolumesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve internal volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Storage pool")][Switch]$storagePool,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/internalVolumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePool","volumes","storageNodes","annotations","datasources","replicaSources","qtrees","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one storage performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciStoragePerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage ports for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve storage ports for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve storage ports for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve protocols of a storage.
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve protocols for.
#>
function Global:Get-OciProtocolsByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve protocols for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/protocols" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage qtrees for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve storage qtrees for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER volumes
        Return list of related Volumes
#>
function Global:Get-OciQtreesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve storage qtrees for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/qtrees" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","internalVolume","shares","annotations","applications","volumes")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage shares for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve storage shares for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
#>
function Global:Get-OciSharesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve storage shares for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Applications")][Switch]$applications
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/shares" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","qtree","annotations","applications")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage nodes for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve storage nodes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER partner
        Return related HA partner
        .PARAMETER performance
        Return related Performance
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageNodesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve storage nodes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related HA partner")][Switch]$partner,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/storageNodes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","partner","performance","datasources","storagePools","ports","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage pools for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve storage pools for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStoragePoolsByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve storage pools for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/storagePools" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","storageResources","internalVolumes","volumes","disks","datasources","storageNodes","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage resources for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve volumes for one storage
    .DESCRIPTION
    
    .PARAMETER id
    Id of storage to retrieve volumes for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVolumesByStorage {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of storage to retrieve volumes for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/storages/{id}/volumes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all Switches
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
    .PARAMETER limit
    Number of switches per page.
    .PARAMETER offset
    Offset to be used with limit
        .PARAMETER fabric
        Return related Fabric
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciSwitches {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Number of switches per page.")][Long]$limit,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Fabric")][Switch]$fabric,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches" -replace "{id}","$id"
 
           
            $switchparameters=@("fabric","performance","ports","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of switches.
    .DESCRIPTION
    

#>
function Global:Get-OciCount {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one switch
    .DESCRIPTION
    
    .PARAMETER id
    Id of switch to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER fabric
        Return related Fabric
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciSwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of switch to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Fabric")][Switch]$fabric,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("fabric","performance","ports","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsBySwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsBySwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsBySwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a switch.
    .DESCRIPTION
    
    .PARAMETER id
    Id of switch to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesBySwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of switch to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one fabric from switch
    .DESCRIPTION
    
    .PARAMETER id
    Id of switch.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=portSummary)
        .PARAMETER switches
        Return list of related Switches
        .PARAMETER datasources
        Return list of related Datasources
#>
function Global:Get-OciFabricBySwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of switch.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=portSummary)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Switches")][Switch]$switches,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/fabric" -replace "{id}","$id"
 
           
            $switchparameters=@("switches","datasources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one switch performance.
    .DESCRIPTION
    
    .PARAMETER id
    Id of switch.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=portSummary)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciSwitchPerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of switch.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=portSummary)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve switch ports for one switch
    .DESCRIPTION
    
    .PARAMETER id
    Id of switch to retrieve switch ports for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsBySwitch {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of switch to retrieve switch ports for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/switches/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all Virtual Machines
    .DESCRIPTION
    
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER sort
    Filter for sorting by metric/s
    .PARAMETER limit
    Number of virtual machines per page.
    .PARAMETER offset
    Offset to be used with limit
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER host
        Return related Host
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVirtualMachines {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for sorting by metric/s")][String]$sort,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Number of virtual machines per page.")][Long]$limit,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Offset to be used with limit")][Long]$offset,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Host")][Switch]$host,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","dataStore","host","vmdks","applications","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve total count of Virtual Machines
    .DESCRIPTION
    

#>
function Global:Get-OciCount {
    [CmdletBinding()]
 
    PARAM (

    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/count" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Virtual Machine
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER host
        Return related Host
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Host")][Switch]$host,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","dataStore","host","vmdks","applications","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciApplicationsByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete application from object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to delete application from
    .PARAMETER appId
    Id of application to delete from object
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete application from",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of application to delete from object")][Long]$appId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/applications/{appId}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one data store for virtual machine
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve data store for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER hosts
        Return list of related Hosts
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDataStoreByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve data store for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Hosts")][Switch]$hosts,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/dataStore" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","hosts","vmdks","datasources","storageResources","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a virtual machine.
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all file systems by virtual machine
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve file systems for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER computeResource
        Return related Compute resource
#>
function Global:Get-OciFileSystemsByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve file systems for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Compute resource")][Switch]$computeResource
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/fileSystems" -replace "{id}","$id"
 
           
            $switchparameters=@("storageResources","vmdks","computeResource")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one virtual machine host
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve host for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER virtualMachines
        Return list of related Virtual machines
        .PARAMETER dataCenter
        Return related Data center
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER clusterHosts
        Return list of related Cluster hosts
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciHostByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve host for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Virtual machines")][Switch]$virtualMachines,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Data center")][Switch]$dataCenter,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Cluster hosts")][Switch]$clusterHosts,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/host" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","applications","virtualMachines","dataCenter","annotations","clusterHosts","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Virtual Machine Performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciVirtualMachinePerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all ports by virtual machine
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve ports for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve ports for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storage resources by virtual machine
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve Vmdks for virtual machine
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine to retrieve disks for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER virtualMachine
        Return related Virtual machine
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVmdksByVirtualMachine {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine to retrieve disks for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return related Virtual machine")][Switch]$virtualMachine,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/virtualMachines/{id}/vmdks" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","dataStore","storageResources","virtualMachine","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one virtual machine Vmdk
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine disk to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER virtualMachine
        Return related Virtual machine
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine disk to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return related Virtual machine")][Switch]$virtualMachine,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","dataStore","storageResources","virtualMachine","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a vmdk.
    .DESCRIPTION
    
    .PARAMETER id
    Id of vmdk to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasourcesByVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of vmdk to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one Vmdk performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine disk to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciVmdkPerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine disk to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage resources for virtual machine disk
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine disk to retrieve storage resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageResourcesByVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine disk to retrieve storage resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/storageResources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve virtual machine for virtual machine disk
    .DESCRIPTION
    
    .PARAMETER id
    Id of virtual machine disk to retrieve virtual machine for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER dataStore
        Return related Datastore
        .PARAMETER host
        Return related Host
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVirtualMachineByVmdk {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of virtual machine disk to retrieve virtual machine for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Datastore")][Switch]$dataStore,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Host")][Switch]$host,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/vmdks/{id}/virtualMachine" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","dataStore","host","vmdks","applications","annotations","datasources","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete annotations from object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
{
  "definition":{"id":"5001"}
},
{
  "definition":{"id":"5002"}
}
]
</pre>
                    
    .PARAMETER id
    Id of object to delete
        .PARAMETER definition
        Return related Definition
#>
function Global:Remove-OciAnnotationsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve annotations for object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=definition)
        .PARAMETER definition
        Return related Definition
#>
function Global:Get-OciAnnotationsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=definition)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Update annotations for object
    .DESCRIPTION
    Request body should be like JSON below: <br/>

<pre>

[
  {
    "rawValue": "Bronze",
    "definition": {
      "id": "4992",
    }
  }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER definition
        Return related Definition
#>
function Global:Update-OciAnnotationsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Definition")][Switch]$definition
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/annotations" -replace "{id}","$id"
 
           
            $switchparameters=@("definition")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PUT' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PUT to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk un-assign applications from asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciUnAssignApplicationsFromAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the applications of object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Get-OciApplicationsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Bulk assign applications to asset
    .DESCRIPTION
    Request body should contain a list of valid application ids, example: <br/>

<pre>
[
    {
        "id":"12345"
    },
    {
        "id":"67890"
    }
]
</pre>
            
    .PARAMETER id
    Id of object to update
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Bulk-OciAssignApplicationsToAsset {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('PATCH' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PATCH -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "PATCH to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Add applications for object
    .DESCRIPTION
    Request body should contain only one valid application id, example: <br/>

<pre>
{
    "id":"12345"
}
</pre>
            
    .PARAMETER id
    Id of object to update
    .PARAMETER applicationId
    Valid application id which should be associated
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Update-OciApplicationsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to update",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Valid application id which should be associated")][String]$applicationId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/applications" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('POST' -match 'PUT|POST') {
                    Write-Verbose "Body: { `"id`": `"$applicationId`" }"
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers -Body "{ `"id`": `"$applicationId`" }" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method POST -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "POST to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Delete application from object
    .DESCRIPTION
    
    .PARAMETER id
    Id of object to delete application from
    .PARAMETER appId
    Id of application to delete from object
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER storageResources
        Return list of related Storage resources
#>
function Global:Remove-OciByTypeAndId {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of object to delete application from",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Id of application to delete from object")][Long]$appId,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/applications/{appId}" -replace "{id}","$id"
 
           
            $switchparameters=@("computeResources","storageResources")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('DELETE' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method DELETE -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "DELETE to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the auto tier policy name of a volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of the volume to retrieve the auto tier policy name.
#>
function Global:Get-OciAutoTierPolicyByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the volume to retrieve the auto tier policy name.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/autoTierPolicy" -replace "{id}","$id"
 
           
            $switchparameters=@("")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all compute resources for a volume
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve compute resources for
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER fileSystems
        Return list of related File systems
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciComputeResourcesByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve compute resources for",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related File systems")][Switch]$fileSystems,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/computeResources" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","ports","storageResources","fileSystems","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all data stores for a given target volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of target volume to retrieve the data stores for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER performance
        Return related Performance
        .PARAMETER hosts
        Return list of related Hosts
        .PARAMETER vmdks
        Return list of related Vmdks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciDatastoresByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of target volume to retrieve the data stores for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Hosts")][Switch]$hosts,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Vmdks")][Switch]$vmdks,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/dataStores" -replace "{id}","$id"
 
           
            $switchparameters=@("performance","hosts","vmdks","datasources","storageResources","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve datasources of a volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve datasources for.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER acquisitionUnit
        Return related Acquisition unit
        .PARAMETER note
        Return related Note
        .PARAMETER changes
        Return list of related Changes
        .PARAMETER packages
        Return list of related Packages
        .PARAMETER activePatch
        Return related Active patch
        .PARAMETER events
        Return list of related Events
        .PARAMETER devices
        Return list of related Devices
        .PARAMETER config
        Return related Config
#>
function Global:Get-OciDatasources {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve datasources for.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Packages")][Switch]$packages,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Config")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/datasources" -replace "{id}","$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packages","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve internal volume for a given volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the internal volume.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePool
        Return related Storage pool
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciInternalVolumeByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the internal volume.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return related Storage pool")][Switch]$storagePool,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/internalVolume" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePool","volumes","storageNodes","annotations","datasources","replicaSources","qtrees","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve one volume performance
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER history
        Return list of related History
#>
function Global:Get-OciVolumePerformance {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related History")][Switch]$history
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/performance" -replace "{id}","$id"
 
           
            $switchparameters=@("history")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all storage ports and their connected ports by volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the ports that are connected to storage ports.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER device
        Return related Device Object
        .PARAMETER fabrics
        Return list of related Fabrics
        .PARAMETER performance
        Return related Performance
        .PARAMETER connectedPorts
        Return list of related Connected ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciPortsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the ports that are connected to storage ports.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Device Object")][Switch]$device,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Fabrics")][Switch]$fabrics,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Connected ports")][Switch]$connectedPorts,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/ports" -replace "{id}","$id"
 
           
            $switchparameters=@("device","fabrics","performance","connectedPorts","annotations","datasources","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve qtree for a given volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the qtree.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER volumes
        Return list of related Volumes
#>
function Global:Get-OciQtree {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the qtree.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/qtree" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","internalVolume","shares","annotations","applications","volumes")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve all source volumes for a given target volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of target volume to retrieve the source volumes.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER dataStores
        Return list of related Datastores
        .PARAMETER computeResources
        Return list of related Compute resources
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER virtualStoragePools
        Return list of related Virtual storage pools
        .PARAMETER virtualizer
        Return related Virtualizer
        .PARAMETER internalVolume
        Return related Internal volume
        .PARAMETER autoTierPolicy
        Return related Auto tier policy
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER replicaSources
        Return list of related Replica sources
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER qtree
        Return related Qtree
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciSourceVolumesByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of target volume to retrieve the source volumes.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Datastores")][Switch]$dataStores,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Compute resources")][Switch]$computeResources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Virtual storage pools")][Switch]$virtualStoragePools,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Virtualizer")][Switch]$virtualizer,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return related Internal volume")][Switch]$internalVolume,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Auto tier policy")][Switch]$autoTierPolicy,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Replica sources")][Switch]$replicaSources,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=19,
                    HelpMessage="Return related Qtree")][Switch]$qtree,
        [parameter(Mandatory=$False,
                    Position=20,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/replicaSources" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","dataStores","computeResources","applications","storagePools","virtualStoragePools","virtualizer","internalVolume","autoTierPolicy","ports","storageNodes","replicaSources","datasources","annotations","qtree","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve the storage of a volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of the volume to retrieve the storage.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the volume to retrieve the storage.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/storage" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage nodes for a given volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the storage nodes.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER partner
        Return related HA partner
        .PARAMETER performance
        Return related Performance
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStorageNodesByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the storage nodes.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related HA partner")][Switch]$partner,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/storageNodes" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","partner","performance","datasources","storagePools","ports","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve storage pools for a given volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the storage pools.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciStoragePoolsByVolume {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the storage pools.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/storagePools" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","storageResources","internalVolumes","volumes","disks","datasources","storageNodes","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve virtual storage pools for a given volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the virtual storage pools.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storage
        Return related Storage
        .PARAMETER performance
        Return related Performance
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVirtualStoragePools {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the virtual storage pools.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return related Storage")][Switch]$storage,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/virtualStoragePools" -replace "{id}","$id"
 
           
            $switchparameters=@("storage","performance","storageResources","internalVolumes","volumes","disks","datasources","storageNodes","annotations","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Retrieve virtualizer for a given backend volume.
    .DESCRIPTION
    
    .PARAMETER id
    Id of volume to retrieve the virtualizer.
    .PARAMETER fromTime
    Filter for time range, from time in milliseconds
    .PARAMETER toTime
    Filter for time range, to time in milliseconds
    .PARAMETER expand
    Expand parameter for underlying JSON object (e.g. expand=read,items)
        .PARAMETER storageNodes
        Return list of related Storage nodes
        .PARAMETER storageResources
        Return list of related Storage resources
        .PARAMETER storagePools
        Return list of related Storage pools
        .PARAMETER internalVolumes
        Return list of related Internal volumes
        .PARAMETER volumes
        Return list of related Volumes
        .PARAMETER qtrees
        Return list of related Qtrees
        .PARAMETER shares
        Return list of related Shares
        .PARAMETER ports
        Return list of related Ports
        .PARAMETER datasources
        Return list of related Datasources
        .PARAMETER annotations
        Return list of related Annotations
        .PARAMETER disks
        Return list of related Disks
        .PARAMETER performance
        Return related Performance
        .PARAMETER protocols
        Return list of related Protocols
        .PARAMETER applications
        Return list of related Applications
        .PARAMETER performancehistory
        Return related Performance History
#>
function Global:Get-OciVirtualizer {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of volume to retrieve the virtualizer.",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Filter for time range, from time in milliseconds")][PSObject]$fromTime,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Filter for time range, to time in milliseconds")][PSObject]$toTime,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=read,items)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Storage nodes")][Switch]$storageNodes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Storage resources")][Switch]$storageResources,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Storage pools")][Switch]$storagePools,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Internal volumes")][Switch]$internalVolumes,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Volumes")][Switch]$volumes,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return list of related Qtrees")][Switch]$qtrees,
        [parameter(Mandatory=$False,
                    Position=10,
                    HelpMessage="Return list of related Shares")][Switch]$shares,
        [parameter(Mandatory=$False,
                    Position=11,
                    HelpMessage="Return list of related Ports")][Switch]$ports,
        [parameter(Mandatory=$False,
                    Position=12,
                    HelpMessage="Return list of related Datasources")][Switch]$datasources,
        [parameter(Mandatory=$False,
                    Position=13,
                    HelpMessage="Return list of related Annotations")][Switch]$annotations,
        [parameter(Mandatory=$False,
                    Position=14,
                    HelpMessage="Return list of related Disks")][Switch]$disks,
        [parameter(Mandatory=$False,
                    Position=15,
                    HelpMessage="Return related Performance")][Switch]$performance,
        [parameter(Mandatory=$False,
                    Position=16,
                    HelpMessage="Return list of related Protocols")][Switch]$protocols,
        [parameter(Mandatory=$False,
                    Position=17,
                    HelpMessage="Return list of related Applications")][Switch]$applications,
        [parameter(Mandatory=$False,
                    Position=18,
                    HelpMessage="Return related Performance History")][Switch]$performancehistory
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/assets/volumes/{id}/virtualizer" -replace "{id}","$id"
 
           
            $switchparameters=@("storageNodes","storageResources","storagePools","internalVolumes","volumes","qtrees","shares","ports","datasources","annotations","disks","performance","protocols","applications","performancehistory")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                if ('GET' -match 'PUT|POST') {
                    Write-Verbose "Body: "
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -Body "" -ContentType 'application/json'
                }
                else {
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
           
            # check performance data
            foreach ($Object in $Result) {
                if ($Object.performance) {
                    # convert timestamps from unix to data format
                    if ($Object.performance.accessed) {
                        $Object.performance.accessed.start = $Object.performance.accessed.start | ConvertFrom-UnixDate
                        $Object.performance.accessed.end = $Object.performance.accessed.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.iops) {
                        $Object.performance.iops.read.start = $Object.performance.iops.read.start | ConvertFrom-UnixDate
                        $Object.performance.iops.read.end = $Object.performance.iops.read.end | ConvertFrom-UnixDate
                        $Object.performance.iops.write.start = $Object.performance.iops.write.start | ConvertFrom-UnixDate
                        $Object.performance.iops.write.end = $Object.performance.iops.write.end | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.start = $Object.performance.iops.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.iops.totalMax.end = $Object.performance.iops.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.iops.total.start = $Object.performance.iops.total.start | ConvertFrom-UnixDate
                        $Object.performance.iops.total.end = $Object.performance.iops.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.cacheHitRatio) {
                        $Object.performance.cacheHitRatio.read.start = $Object.performance.cacheHitRatio.read.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.read.end = $Object.performance.cacheHitRatio.read.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.start = $Object.performance.cacheHitRatio.write.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.write.end = $Object.performance.cacheHitRatio.write.end | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.start = $Object.performance.cacheHitRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.cacheHitRatio.total.end = $Object.performance.cacheHitRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.latency) {
                        $Object.performance.latency.read.start = $Object.performance.latency.read.start | ConvertFrom-UnixDate
                        $Object.performance.latency.read.end = $Object.performance.latency.read.end | ConvertFrom-UnixDate
                        $Object.performance.latency.write.start = $Object.performance.latency.write.start | ConvertFrom-UnixDate
                        $Object.performance.latency.write.end = $Object.performance.latency.write.end | ConvertFrom-UnixDate
                        $Object.performance.latency.total.start = $Object.performance.latency.total.start | ConvertFrom-UnixDate
                        $Object.performance.latency.total.end = $Object.performance.latency.total.end | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.start = $Object.performance.latency.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.latency.totalMax.end = $Object.performance.latency.totalMax.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.partialBlocksRatio.total) {
                        $Object.performance.partialBlocksRatio.total.start = $Object.performance.partialBlocksRatio.total.start | ConvertFrom-UnixDate
                        $Object.performance.partialBlocksRatio.total.end = $Object.performance.partialBlocksRatio.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.writePending.total) {
                        $Object.performance.writePending.total.start = $Object.performance.writePending.total.start | ConvertFrom-UnixDate
                        $Object.performance.writePending.total.end = $Object.performance.writePending.total.end | ConvertFrom-UnixDate
                    }
                    if ($Object.performance.throughput) {
                        $Object.performance.throughput.read.start = $Object.performance.throughput.read.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.read.end = $Object.performance.throughput.read.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.start = $Object.performance.throughput.write.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.write.end = $Object.performance.throughput.write.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.start = $Object.performance.throughput.totalMax.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.totalMax.end = $Object.performance.throughput.totalMax.end | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.start = $Object.performance.throughput.total.start | ConvertFrom-UnixDate
                        $Object.performance.throughput.total.end = $Object.performance.throughput.total.end | ConvertFrom-UnixDate
                    }

                    # check and convert historical performance data
                    if ($Object.performance.history) {
                        if ($Object.performance.history[0].count -eq 2) {
                            $Object.performance.history = foreach ($entry in $Object.performance.history) {
                                if ($entry[1]) {
                                    $entry[1] | Add-Member -MemberType NoteProperty -Name timestamp -Value ($entry[0] | ConvertFrom-UnixDate) -PassThru
                                }
                            }
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Search for OCI Objects
    .DESCRIPTION
    Search for OCI Objects
    .PARAMETER query
    Query parameter
#>
function Global:Search-Oci {
    [CmdletBinding()]
 
    PARAM (
            [parameter(Mandatory=$true,
                    Position=0,
                    HelpMessage="The search query expression parameter",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][string[]]$query
    )
 
    Begin {
        $Result = $null
    }
   
    
    Process {
        foreach ($query in $query) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/search?query=$query"
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method Get -Uri $Uri -Headers $CurrentOciServer.Headers
                if ($Result.toString().startsWith('{')) {
                    $Result = ParseJsonString($Result)
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
       
            Write-Output $Result.resultsByCategory
        }
    }
}
<#
    .SYNOPSIS
    Retrieve OCI Server health status
    .DESCRIPTION
    Retrieve OCI Server health status
#>
function Global:Get-OciHealth {
    [CmdletBinding()]

    PARAM ()
 
    Begin {
        $Result = $null
    }
   
    Process {
        $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/health"
 
        try {
            $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method Get -Uri $Uri -Headers $CurrentOciServer.Headers
            if ($Result.toString().startsWith('{')) {
                $Result = ParseJsonString($Result)
            }
        }
        catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
        }

        foreach ($Item in $Result) {
            $Item.time = $Item.time | ConvertFrom-UnixDate
        }
       
        Write-Output $Result
    }
}

<#
    .SYNOPSIS
    Update OCI Datasource
    .DESCRIPTION
    Update OCI Datasource
#>
function Global:Update-OciDatasource {
    [CmdletBinding()]

    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="Id of the datasource to be updated",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][String[]]$id,
        [parameter(Mandatory=$True,
                    Position=1,
                    HelpMessage="Datasource configuration",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][PSObject[]]$config
        )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/$id"
 
            try {
                $Body = ($config.config | ConvertTo-Json -Depth 10)
                Write-Verbose "Body: $Body"
                $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method PUT -Uri $Uri -Headers $CurrentOciServer.Headers -Body $Body -ContentType 'application/json'
                if ($Result.toString().startsWith('{')) {
                    $Result = ParseJsonString($Result)
                }
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
       
            Write-Output $Result
        }
    }
}
<#
    .SYNOPSIS
    Get OCI Datasource
    .DESCRIPTION
    Get OCI Datasource
#>
function Global:Get-OciDatasource {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$True,
                    Position=0,
                    HelpMessage="ID of the datasource to retrieve",
                    ValueFromPipeline=$True,
                    ValueFromPipelineByPropertyName=$True)][Long[]]$id,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=acquisitionUnit)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return list of related Package statuses")][Switch]$packageStatuses,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=9,
                    HelpMessage="Return datasource configuration")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources/$id"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packageStatuses","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }
            
            if ($Result.config) {
                foreach ($Package in $Result.config.packages) {
                    foreach ($Attribute in $Package.attributes) {
                        $PackageIndex = $Result.config.packages.IndexOf($Package)
                        $AttributeIndex = $Package.attributes.IndexOf($Attribute)
                        Invoke-Command -ScriptBlock ([ScriptBlock]::Create("`$Result.config | Add-Member -MemberType ScriptProperty -Name $($Attribute.name) -Value { `$this.packages[$PackageIndex].attributes[$AttributeIndex].Value } -SecondValue { `$this.packages[$PackageIndex].attributes[$AttributeIndex].Value = `$args[0] }  -ErrorAction SilentlyContinue"))
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Get OCI Datasources
    .DESCRIPTION
    Get OCI Datasources
#>
function Global:Get-OciDatasources {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                    Position=0,
                    HelpMessage="Expand parameter for underlying JSON object (e.g. expand=acquisitionUnit)")][String]$expand,
        [parameter(Mandatory=$False,
                    Position=1,
                    HelpMessage="Return related Acquisition unit")][Switch]$acquisitionUnit,
        [parameter(Mandatory=$False,
                    Position=2,
                    HelpMessage="Return related Note")][Switch]$note,
        [parameter(Mandatory=$False,
                    Position=3,
                    HelpMessage="Return list of related Changes")][Switch]$changes,
        [parameter(Mandatory=$False,
                    Position=4,
                    HelpMessage="Return list of related Package statuses")][Switch]$packageStatuses,
        [parameter(Mandatory=$False,
                    Position=5,
                    HelpMessage="Return related Active patch")][Switch]$activePatch,
        [parameter(Mandatory=$False,
                    Position=6,
                    HelpMessage="Return list of related Events")][Switch]$events,
        [parameter(Mandatory=$False,
                    Position=7,
                    HelpMessage="Return list of related Devices")][Switch]$devices,
        [parameter(Mandatory=$False,
                    Position=8,
                    HelpMessage="Return datasource configuration")][Switch]$config
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $id = @($id)
        foreach ($id in $id) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/datasources"
 
           
            $switchparameters=@("acquisitionUnit","note","changes","packageStatuses","activePatch","events","devices","config")
            foreach ($parameter in $switchparameters) {
                if ((Get-Variable $parameter).Value) {
                    if ($expand) {
                        $expand += ",$($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')"
                    }
                    else {
                        $expand = $($parameter -replace 'performancehistory','performance.history' -replace 'hostswitch','host')
                    }
                }
            }
 
            if ($fromTime -or $toTime -or $expand) {
                $Uri += '?'
                $Separator = ''
                if ($fromTime) {
                    $Uri += "fromTime=$($fromTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($toTime) {
                    $Uri += "$($Separator)toTime=$($toTime | ConvertTo-UnixTimestamp)"
                    $Separator = '&'
                }
                if ($expand) {
                    $Uri += "$($Separator)expand=$expand"
                }
            }
 
            try {
                $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
 
            if (([String]$Result).Trim().startsWith('{') -or ([String]$Result).toString().Trim().startsWith('[')) {
                $Result = ParseJsonString($Result.Trim())
            }

            if ($Result.config) {
                foreach ($Datasource in $Result) {
                    foreach ($Package in $Datasource.config.packages) {
                        foreach ($Attribute in $Package.attributes) {
                            $PackageIndex = $Datasource.config.packages.IndexOf($Package)
                            $AttributeIndex = $Package.attributes.IndexOf($Attribute)
                            Invoke-Command -ScriptBlock ([ScriptBlock]::Create("`$Datasource.config | Add-Member -MemberType ScriptProperty -Name $($Attribute.name) -Value { `$this.packages[$PackageIndex].attributes[$AttributeIndex].Value } -SecondValue { `$this.packages[$PackageIndex].attributes[$AttributeIndex].Value = `$args[0] } -ErrorAction SilentlyContinue"))
                        }
                    }
                }
            }
       
            Write-Output $Result
        }
    }
}

<#
    .SYNOPSIS
    Restore OCI Backup
    .DESCRIPTION
    Restore OCI Backup
#>
function Global:Restore-OciBackup {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                Position=0,
                HelpMessage="OnCommand Insight Server")][PSObject]$Server,
        [parameter(Mandatory=$True,
                Position=1,
                HelpMessage="Full path of OnCommand Insight Backup, either locally or on OnCommand Insight Server.",
                ValueFromPipeline=$True,
                ValueFromPipelineByPropertyName=$True)][PSObject[]]$FilePath
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $FilePath = @($FilePath)

        $StartTime = Get-Date

        foreach ($FilePath in $FilePath) {
            $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/restore"

            if (Test-Path $FilePath) {
                Write-Host "Found local OCI Backup in $FilePath which will be restored"
                
                Write-Host "Starting Restore job. This can take several hours..."

                $Job = Start-Job {
                    Import-Module OnCommand-Insight

                    [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

                    Invoke-MultipartFormDataUpload -InFile $args[0] -Uri $args[1] -Header $args[2]
                } -ArgumentList $FilePath,$URI,$CurrentOciServer.Headers
                
            }
            else {
                Write-Host "No local Backup in $FilePath, trying to restore backup residing on OnCommand Insight Server"
            
                # create boundary
                $boundary = [System.Guid]::NewGuid().ToString()
        
                # Linefeed character
                $LF = "`r`n"

                # Build Body for  form-data manually since PS does not support multipart/form-data out of the box
                $Body = (
                    "--$boundary",
                    "Content-Disposition: form-data; name=`"backupFilePath`"$LF",
                    $FilePath,
                    "--$boundary--$LF"
                ) -join $LF

                Write-Host "Starting Restore job..."

                $Job = Start-Job {

                    Import-Module OnCommand-Insight

                    [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

                    Invoke-RestMethod -Uri $args[0] -Timeout 3600 -Method Post -ContentType "multipart/form-data; boundary=`"$($args[1])`"" -Body $args[2] -Headers $args[3]
                } -ArgumentList $URI,$boundary,$Body,$CurrentOciServer.Headers
            }

            try {
                $percentComplete = 10
                $activity = "Restore started"
                $status = "Uploading"
                Write-Progress -Activity $activity -status $status -percentComplete $percentComplete
                sleep 2
                $i = 0
                while ($true) {
                    $i++
                    $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                    if ($i -eq 1440) { 
                        Write-Host ''
                        throw 'Backup did not finish within 24 hours' 
                    }
                    if ($Result.status -eq 'SUCCESSFUL') { 
                        break 
                    }
                    elseif ($Result.status -eq 'FAILED' -and ($Result.currentStep.startTime | get-date) -ge $StartTime -or $Job.State -ne 'Running') {
                        break
                    }
                    elseif (($Result.currentStep.startTime | get-date) -ge $StartTime) {
                        $activity = $Result.currentStep.phaseText
                        $status = $Result.currentStep.operationText
                    }
                    switch ($activity) {
                        "Restore started" { $percentComplete = 20 }
                        "Preparing" { $percentComplete = 30 }
                    } 
                    Write-Progress -Activity $activity -status $status -percentComplete $percentComplete
                    sleep 5
                }
                Write-Progress -Activity $Result.currentStep.phaseText -status $Result.currentStep.operationText -percentComplete 100
                sleep 1
            }
            catch {
                $ResponseBody = ParseExceptionBody $_.Exception.Response
                Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
            }
        }
        Write-Output $Result
    }
}

<#
    .SYNOPSIS
    Get OCI Backup
    .DESCRIPTION
    Get OCI Backup
#>
function Global:Get-OciBackup {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                Position=0,
                HelpMessage="OnCommand Insight Server")][PSObject]$Server,
        [parameter(Mandatory=$True,
                Position=1,
                HelpMessage="Path where to store OnCommand Insight Backup.")][PSObject]$Path,
        [parameter(Mandatory=$False,
                Position=2,
                HelpMessage="Time in minutes to wait for backup to complete (Default = 60 minutes).")][PSObject]$Timeout=60
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $URI = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/backups/current"
 
        Write-Host "Starting Backup"  
        Start-Job { 
            add-type @"
                    using System.Net;
                    using System.Security.Cryptography.X509Certificates;
                    public class TrustAllCertsPolicy : ICertificatePolicy {
                       public bool CheckValidationResult(
                            ServicePoint srvPoint, X509Certificate certificate,
                            WebRequest request, int certificateProblem) {
                            return true;
                        }
                    }
"@

            [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

            Invoke-RestMethod -TimeoutSec 5 -Method POST -Uri $args[0] -Headers $args[1] 
        } -ArgumentList $URI,$CurrentOciServer.Headers

        try {
            Write-Progress -Activity "Backup started" -status "Backing up" -percentComplete 0
            $i = 0
            while ($true) {
                $i++
                $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
                if ($i -eq ($Timeout * 12)) { 
                    Write-Progress -Activity "Backup did not complete in $Timeout minutes" -status "Backing failed" -percentComplete 100
                }
                if ($Result.status -eq 'SUCCESSFUL') { 
                    Write-Progress -Activity $Result -status $Result -percentComplete 100
                    sleep 1
                    break 
                }
                Write-Progress -Activity "Backup started" -status $Result.status -percentComplete (100*$i/($Timeout*12))
                sleep 5
            }
            $Uri = $($CurrentOciServer.BaseUri) + $Result.Url
        }
        catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
        }

        $FilePath = $Path + '\' + (($Uri -split '/') | select -last 1)
        $Date = [datetime]::ParseExact($($FilePath -replace '.+_D(.*)_[0-9]+.zip','$1'),"yyyyMMdd_HHmm",$null)

        try {
            Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers -OutFile $FilePath
            Write-Host "Backup Saved to $FilePath"
            
            $Result = New-Object -TypeName PSCustomObject -ArgumentList @{FilePath=$FilePath;Date=$Date;URI=$Uri}

            Write-Output $Result
        }
        catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
        }
    }
}

<#
    .SYNOPSIS
    Get OCI Backups
    .DESCRIPTION
    Get OCI Backups
#>
function Global:Get-OciBackups {
    [CmdletBinding()]
 
    PARAM (
        [parameter(Mandatory=$False,
                Position=0,
                HelpMessage="OnCommand Insight Server")][PSObject]$Server
    )
 
    Begin {
        $Result = $null
    }
   
    Process {
        $Uri = $($CurrentOciServer.BaseUri) + "/rest/v1/admin/backups"
 
        try {
            $Result = Invoke-RestMethod -TimeoutSec $CurrentOciServer.Timeout -Method GET -Uri $Uri -Headers $CurrentOciServer.Headers
            
            $Result = $Result | % { [PSCustomObject]@{FilePath=$_.path;Date=($_.date | get-date)} }

            Write-Output $Result
        }
        catch {
            $ResponseBody = ParseExceptionBody $_.Exception.Response
            Write-Error "GET to $Uri failed with Exception $($_Exception.Message) `n $responseBody"
        }
    }
}